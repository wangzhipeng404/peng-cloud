"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkonline_conplier"] = self["webpackChunkonline_conplier"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_elixir_elixir_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/elixir/elixir.js":
/*!****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/elixir/elixir.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": function() { return /* binding */ conf; },\n/* harmony export */   \"language\": function() { return /* binding */ language; }\n/* harmony export */ });\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.34.0(9d278685b078158491964f8fd7ac9628fffa0f30)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n// src/basic-languages/elixir/elixir.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\"\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  autoClosingPairs: [{\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"comment\"]\n  }, {\n    open: '\"\"\"',\n    close: '\"\"\"'\n  }, {\n    open: \"`\",\n    close: \"`\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"<<\",\n    close: \">>\"\n  }],\n  indentationRules: {\n    increaseIndentPattern: /^\\s*(after|else|catch|rescue|fn|[^#]*(do|<\\-|\\->|\\{|\\[|\\=))\\s*$/,\n    decreaseIndentPattern: /^\\s*((\\}|\\])\\s*$|(after|else|catch|rescue|end)\\b)/\n  }\n};\nvar language = {\n  defaultToken: \"source\",\n  tokenPostfix: \".elixir\",\n  brackets: [{\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"<<\",\n    close: \">>\",\n    token: \"delimiter.angle.special\"\n  }],\n  declarationKeywords: [\"def\", \"defp\", \"defn\", \"defnp\", \"defguard\", \"defguardp\", \"defmacro\", \"defmacrop\", \"defdelegate\", \"defcallback\", \"defmacrocallback\", \"defmodule\", \"defprotocol\", \"defexception\", \"defimpl\", \"defstruct\"],\n  operatorKeywords: [\"and\", \"in\", \"not\", \"or\", \"when\"],\n  namespaceKeywords: [\"alias\", \"import\", \"require\", \"use\"],\n  otherKeywords: [\"after\", \"case\", \"catch\", \"cond\", \"do\", \"else\", \"end\", \"fn\", \"for\", \"if\", \"quote\", \"raise\", \"receive\", \"rescue\", \"super\", \"throw\", \"try\", \"unless\", \"unquote_splicing\", \"unquote\", \"with\"],\n  constants: [\"true\", \"false\", \"nil\"],\n  nameBuiltin: [\"__MODULE__\", \"__DIR__\", \"__ENV__\", \"__CALLER__\", \"__STACKTRACE__\"],\n  operator: /-[->]?|!={0,2}|\\*{1,2}|\\/|\\\\\\\\|&{1,3}|\\.\\.?|\\^(?:\\^\\^)?|\\+\\+?|<(?:-|<<|=|>|\\|>|~>?)?|=~|={1,3}|>(?:=|>>)?|\\|~>|\\|>|\\|{1,3}|~>>?|~~~|::/,\n  variableName: /[a-z_][a-zA-Z0-9_]*[?!]?/,\n  atomName: /[a-zA-Z_][a-zA-Z0-9_@]*[?!]?|@specialAtomName|@operator/,\n  specialAtomName: /\\.\\.\\.|<<>>|%\\{\\}|%|\\{\\}/,\n  aliasPart: /[A-Z][a-zA-Z0-9_]*/,\n  moduleName: /@aliasPart(?:\\.@aliasPart)*/,\n  sigilSymmetricDelimiter: /\"\"\"|'''|\"|'|\\/|\\|/,\n  sigilStartDelimiter: /@sigilSymmetricDelimiter|<|\\{|\\[|\\(/,\n  sigilEndDelimiter: /@sigilSymmetricDelimiter|>|\\}|\\]|\\)/,\n  sigilModifiers: /[a-zA-Z0-9]*/,\n  decimal: /\\d(?:_?\\d)*/,\n  hex: /[0-9a-fA-F](_?[0-9a-fA-F])*/,\n  octal: /[0-7](_?[0-7])*/,\n  binary: /[01](_?[01])*/,\n  escape: /\\\\u[0-9a-fA-F]{4}|\\\\x[0-9a-fA-F]{2}|\\\\./,\n  tokenizer: {\n    root: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@comments\"\n    }, {\n      include: \"@keywordsShorthand\"\n    }, {\n      include: \"@numbers\"\n    }, {\n      include: \"@identifiers\"\n    }, {\n      include: \"@strings\"\n    }, {\n      include: \"@atoms\"\n    }, {\n      include: \"@sigils\"\n    }, {\n      include: \"@attributes\"\n    }, {\n      include: \"@symbols\"\n    }],\n    whitespace: [[/\\s+/, \"white\"]],\n    comments: [[/(#)(.*)/, [\"comment.punctuation\", \"comment\"]]],\n    keywordsShorthand: [[/(@atomName)(:)/, [\"constant\", \"constant.punctuation\"]], [/\"(?=([^\"]|#\\{.*?\\}|\\\\\")*\":)/, {\n      token: \"constant.delimiter\",\n      next: \"@doubleQuotedStringKeyword\"\n    }], [/'(?=([^']|#\\{.*?\\}|\\\\')*':)/, {\n      token: \"constant.delimiter\",\n      next: \"@singleQuotedStringKeyword\"\n    }]],\n    doubleQuotedStringKeyword: [[/\":/, {\n      token: \"constant.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringConstantContentInterpol\"\n    }],\n    singleQuotedStringKeyword: [[/':/, {\n      token: \"constant.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringConstantContentInterpol\"\n    }],\n    numbers: [[/0b@binary/, \"number.binary\"], [/0o@octal/, \"number.octal\"], [/0x@hex/, \"number.hex\"], [/@decimal\\.@decimal([eE]-?@decimal)?/, \"number.float\"], [/@decimal/, \"number\"]],\n    identifiers: [[/\\b(defp?|defnp?|defmacrop?|defguardp?|defdelegate)(\\s+)(@variableName)(?!\\s+@operator)/, [\"keyword.declaration\", \"white\", {\n      cases: {\n        unquote: \"keyword\",\n        \"@default\": \"function\"\n      }\n    }]], [/(@variableName)(?=\\s*\\.?\\s*\\()/, {\n      cases: {\n        \"@declarationKeywords\": \"keyword.declaration\",\n        \"@namespaceKeywords\": \"keyword\",\n        \"@otherKeywords\": \"keyword\",\n        \"@default\": \"function.call\"\n      }\n    }], [/(@moduleName)(\\s*)(\\.)(\\s*)(@variableName)/, [\"type.identifier\", \"white\", \"operator\", \"white\", \"function.call\"]], [/(:)(@atomName)(\\s*)(\\.)(\\s*)(@variableName)/, [\"constant.punctuation\", \"constant\", \"white\", \"operator\", \"white\", \"function.call\"]], [/(\\|>)(\\s*)(@variableName)/, [\"operator\", \"white\", {\n      cases: {\n        \"@otherKeywords\": \"keyword\",\n        \"@default\": \"function.call\"\n      }\n    }]], [/(&)(\\s*)(@variableName)/, [\"operator\", \"white\", \"function.call\"]], [/@variableName/, {\n      cases: {\n        \"@declarationKeywords\": \"keyword.declaration\",\n        \"@operatorKeywords\": \"keyword.operator\",\n        \"@namespaceKeywords\": \"keyword\",\n        \"@otherKeywords\": \"keyword\",\n        \"@constants\": \"constant.language\",\n        \"@nameBuiltin\": \"variable.language\",\n        \"_.*\": \"comment.unused\",\n        \"@default\": \"identifier\"\n      }\n    }], [/@moduleName/, \"type.identifier\"]],\n    strings: [[/\"\"\"/, {\n      token: \"string.delimiter\",\n      next: \"@doubleQuotedHeredoc\"\n    }], [/'''/, {\n      token: \"string.delimiter\",\n      next: \"@singleQuotedHeredoc\"\n    }], [/\"/, {\n      token: \"string.delimiter\",\n      next: \"@doubleQuotedString\"\n    }], [/'/, {\n      token: \"string.delimiter\",\n      next: \"@singleQuotedString\"\n    }]],\n    doubleQuotedHeredoc: [[/\"\"\"/, {\n      token: \"string.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringContentInterpol\"\n    }],\n    singleQuotedHeredoc: [[/'''/, {\n      token: \"string.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringContentInterpol\"\n    }],\n    doubleQuotedString: [[/\"/, {\n      token: \"string.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringContentInterpol\"\n    }],\n    singleQuotedString: [[/'/, {\n      token: \"string.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringContentInterpol\"\n    }],\n    atoms: [[/(:)(@atomName)/, [\"constant.punctuation\", \"constant\"]], [/:\"/, {\n      token: \"constant.delimiter\",\n      next: \"@doubleQuotedStringAtom\"\n    }], [/:'/, {\n      token: \"constant.delimiter\",\n      next: \"@singleQuotedStringAtom\"\n    }]],\n    doubleQuotedStringAtom: [[/\"/, {\n      token: \"constant.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringConstantContentInterpol\"\n    }],\n    singleQuotedStringAtom: [[/'/, {\n      token: \"constant.delimiter\",\n      next: \"@pop\"\n    }], {\n      include: \"@stringConstantContentInterpol\"\n    }],\n    sigils: [[/~[a-z]@sigilStartDelimiter/, {\n      token: \"@rematch\",\n      next: \"@sigil.interpol\"\n    }], [/~[A-Z]@sigilStartDelimiter/, {\n      token: \"@rematch\",\n      next: \"@sigil.noInterpol\"\n    }]],\n    sigil: [[/~([a-zA-Z])\\{/, {\n      token: \"@rematch\",\n      switchTo: \"@sigilStart.$S2.$1.{.}\"\n    }], [/~([a-zA-Z])\\[/, {\n      token: \"@rematch\",\n      switchTo: \"@sigilStart.$S2.$1.[.]\"\n    }], [/~([a-zA-Z])\\(/, {\n      token: \"@rematch\",\n      switchTo: \"@sigilStart.$S2.$1.(.)\"\n    }], [/~([a-zA-Z])\\</, {\n      token: \"@rematch\",\n      switchTo: \"@sigilStart.$S2.$1.<.>\"\n    }], [/~([a-zA-Z])(@sigilSymmetricDelimiter)/, {\n      token: \"@rematch\",\n      switchTo: \"@sigilStart.$S2.$1.$2.$2\"\n    }]],\n    \"sigilStart.interpol.s\": [[/~s@sigilStartDelimiter/, {\n      token: \"string.delimiter\",\n      switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n    }]],\n    \"sigilContinue.interpol.s\": [[/(@sigilEndDelimiter)@sigilModifiers/, {\n      cases: {\n        \"$1==$S5\": {\n          token: \"string.delimiter\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string\"\n      }\n    }], {\n      include: \"@stringContentInterpol\"\n    }],\n    \"sigilStart.noInterpol.S\": [[/~S@sigilStartDelimiter/, {\n      token: \"string.delimiter\",\n      switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n    }]],\n    \"sigilContinue.noInterpol.S\": [[/(^|[^\\\\])\\\\@sigilEndDelimiter/, \"string\"], [/(@sigilEndDelimiter)@sigilModifiers/, {\n      cases: {\n        \"$1==$S5\": {\n          token: \"string.delimiter\",\n          next: \"@pop\"\n        },\n        \"@default\": \"string\"\n      }\n    }], {\n      include: \"@stringContent\"\n    }],\n    \"sigilStart.interpol.r\": [[/~r@sigilStartDelimiter/, {\n      token: \"regexp.delimiter\",\n      switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n    }]],\n    \"sigilContinue.interpol.r\": [[/(@sigilEndDelimiter)@sigilModifiers/, {\n      cases: {\n        \"$1==$S5\": {\n          token: \"regexp.delimiter\",\n          next: \"@pop\"\n        },\n        \"@default\": \"regexp\"\n      }\n    }], {\n      include: \"@regexpContentInterpol\"\n    }],\n    \"sigilStart.noInterpol.R\": [[/~R@sigilStartDelimiter/, {\n      token: \"regexp.delimiter\",\n      switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n    }]],\n    \"sigilContinue.noInterpol.R\": [[/(^|[^\\\\])\\\\@sigilEndDelimiter/, \"regexp\"], [/(@sigilEndDelimiter)@sigilModifiers/, {\n      cases: {\n        \"$1==$S5\": {\n          token: \"regexp.delimiter\",\n          next: \"@pop\"\n        },\n        \"@default\": \"regexp\"\n      }\n    }], {\n      include: \"@regexpContent\"\n    }],\n    \"sigilStart.interpol\": [[/~([a-zA-Z])@sigilStartDelimiter/, {\n      token: \"sigil.delimiter\",\n      switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n    }]],\n    \"sigilContinue.interpol\": [[/(@sigilEndDelimiter)@sigilModifiers/, {\n      cases: {\n        \"$1==$S5\": {\n          token: \"sigil.delimiter\",\n          next: \"@pop\"\n        },\n        \"@default\": \"sigil\"\n      }\n    }], {\n      include: \"@sigilContentInterpol\"\n    }],\n    \"sigilStart.noInterpol\": [[/~([a-zA-Z])@sigilStartDelimiter/, {\n      token: \"sigil.delimiter\",\n      switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n    }]],\n    \"sigilContinue.noInterpol\": [[/(^|[^\\\\])\\\\@sigilEndDelimiter/, \"sigil\"], [/(@sigilEndDelimiter)@sigilModifiers/, {\n      cases: {\n        \"$1==$S5\": {\n          token: \"sigil.delimiter\",\n          next: \"@pop\"\n        },\n        \"@default\": \"sigil\"\n      }\n    }], {\n      include: \"@sigilContent\"\n    }],\n    attributes: [[/\\@(module|type)?doc (~[sS])?\"\"\"/, {\n      token: \"comment.block.documentation\",\n      next: \"@doubleQuotedHeredocDocstring\"\n    }], [/\\@(module|type)?doc (~[sS])?\"/, {\n      token: \"comment.block.documentation\",\n      next: \"@doubleQuotedStringDocstring\"\n    }], [/\\@(module|type)?doc false/, \"comment.block.documentation\"], [/\\@(@variableName)/, \"variable\"]],\n    doubleQuotedHeredocDocstring: [[/\"\"\"/, {\n      token: \"comment.block.documentation\",\n      next: \"@pop\"\n    }], {\n      include: \"@docstringContent\"\n    }],\n    doubleQuotedStringDocstring: [[/\"/, {\n      token: \"comment.block.documentation\",\n      next: \"@pop\"\n    }], {\n      include: \"@docstringContent\"\n    }],\n    symbols: [[/\\?(\\\\.|[^\\\\\\s])/, \"number.constant\"], [/&\\d+/, \"operator\"], [/<<<|>>>/, \"operator\"], [/[()\\[\\]\\{\\}]|<<|>>/, \"@brackets\"], [/\\.\\.\\./, \"identifier\"], [/=>/, \"punctuation\"], [/@operator/, \"operator\"], [/[:;,.%]/, \"punctuation\"]],\n    stringContentInterpol: [{\n      include: \"@interpolation\"\n    }, {\n      include: \"@escapeChar\"\n    }, {\n      include: \"@stringContent\"\n    }],\n    stringContent: [[/./, \"string\"]],\n    stringConstantContentInterpol: [{\n      include: \"@interpolation\"\n    }, {\n      include: \"@escapeChar\"\n    }, {\n      include: \"@stringConstantContent\"\n    }],\n    stringConstantContent: [[/./, \"constant\"]],\n    regexpContentInterpol: [{\n      include: \"@interpolation\"\n    }, {\n      include: \"@escapeChar\"\n    }, {\n      include: \"@regexpContent\"\n    }],\n    regexpContent: [[/(\\s)(#)(\\s.*)$/, [\"white\", \"comment.punctuation\", \"comment\"]], [/./, \"regexp\"]],\n    sigilContentInterpol: [{\n      include: \"@interpolation\"\n    }, {\n      include: \"@escapeChar\"\n    }, {\n      include: \"@sigilContent\"\n    }],\n    sigilContent: [[/./, \"sigil\"]],\n    docstringContent: [[/./, \"comment.block.documentation\"]],\n    escapeChar: [[/@escape/, \"constant.character.escape\"]],\n    interpolation: [[/#{/, {\n      token: \"delimiter.bracket.embed\",\n      next: \"@interpolationContinue\"\n    }]],\n    interpolationContinue: [[/}/, {\n      token: \"delimiter.bracket.embed\",\n      next: \"@pop\"\n    }], {\n      include: \"@root\"\n    }]\n  }\n};\n\n\n//# sourceURL=webpack://online-conplier/./node_modules/monaco-editor/esm/vs/basic-languages/elixir/elixir.js?");

/***/ })

}]);