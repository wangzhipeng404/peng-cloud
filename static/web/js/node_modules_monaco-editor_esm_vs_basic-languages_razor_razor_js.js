"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkonline_conplier"] = self["webpackChunkonline_conplier"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_razor_razor_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/razor/razor.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/razor/razor.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": function() { return /* binding */ conf; },\n/* harmony export */   \"language\": function() { return /* binding */ language; }\n/* harmony export */ });\n/* harmony import */ var _editor_editor_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../editor/editor.api.js */ \"./node_modules/monaco-editor/esm/vs/editor/editor.api.js\");\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.34.0(9d278685b078158491964f8fd7ac9628fffa0f30)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n\n  return to;\n};\n\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\")); // src/fillers/monaco-editor-core.ts\n\n\nvar monaco_editor_core_exports = {};\n\n__reExport(monaco_editor_core_exports, _editor_editor_api_js__WEBPACK_IMPORTED_MODULE_0__);\n\n // src/basic-languages/razor/razor.ts\n\nvar EMPTY_ELEMENTS = [\"area\", \"base\", \"br\", \"col\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"menuitem\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"];\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n  comments: {\n    blockComment: [\"<!--\", \"-->\"]\n  },\n  brackets: [[\"<!--\", \"-->\"], [\"<\", \">\"], [\"{\", \"}\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }],\n  onEnterRules: [{\n    beforeText: new RegExp(`<(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, \"i\"),\n    afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n    action: {\n      indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\n    }\n  }, {\n    beforeText: new RegExp(`<(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, \"i\"),\n    action: {\n      indentAction: monaco_editor_core_exports.languages.IndentAction.Indent\n    }\n  }]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \"\",\n  tokenizer: {\n    root: [[/@@@@/], [/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInSimpleState.root\"\n    }], [/<!DOCTYPE/, \"metatag.html\", \"@doctype\"], [/<!--/, \"comment.html\", \"@comment\"], [/(<)([\\w\\-]+)(\\/>)/, [\"delimiter.html\", \"tag.html\", \"delimiter.html\"]], [/(<)(script)/, [\"delimiter.html\", {\n      token: \"tag.html\",\n      next: \"@script\"\n    }]], [/(<)(style)/, [\"delimiter.html\", {\n      token: \"tag.html\",\n      next: \"@style\"\n    }]], [/(<)([:\\w\\-]+)/, [\"delimiter.html\", {\n      token: \"tag.html\",\n      next: \"@otherTag\"\n    }]], [/(<\\/)([\\w\\-]+)/, [\"delimiter.html\", {\n      token: \"tag.html\",\n      next: \"@otherTag\"\n    }]], [/</, \"delimiter.html\"], [/[ \\t\\r\\n]+/], [/[^<@]+/]],\n    doctype: [[/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInSimpleState.comment\"\n    }], [/[^>]+/, \"metatag.content.html\"], [/>/, \"metatag.html\", \"@pop\"]],\n    comment: [[/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInSimpleState.comment\"\n    }], [/-->/, \"comment.html\", \"@pop\"], [/[^-]+/, \"comment.content.html\"], [/./, \"comment.content.html\"]],\n    otherTag: [[/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInSimpleState.otherTag\"\n    }], [/\\/?>/, \"delimiter.html\", \"@pop\"], [/\"([^\"]*)\"/, \"attribute.value\"], [/'([^']*)'/, \"attribute.value\"], [/[\\w\\-]+/, \"attribute.name\"], [/=/, \"delimiter\"], [/[ \\t\\r\\n]+/]],\n    script: [[/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInSimpleState.script\"\n    }], [/type/, \"attribute.name\", \"@scriptAfterType\"], [/\"([^\"]*)\"/, \"attribute.value\"], [/'([^']*)'/, \"attribute.value\"], [/[\\w\\-]+/, \"attribute.name\"], [/=/, \"delimiter\"], [/>/, {\n      token: \"delimiter.html\",\n      next: \"@scriptEmbedded.text/javascript\",\n      nextEmbedded: \"text/javascript\"\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(script\\s*)(>)/, [\"delimiter.html\", \"tag.html\", {\n      token: \"delimiter.html\",\n      next: \"@pop\"\n    }]]],\n    scriptAfterType: [[/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInSimpleState.scriptAfterType\"\n    }], [/=/, \"delimiter\", \"@scriptAfterTypeEquals\"], [/>/, {\n      token: \"delimiter.html\",\n      next: \"@scriptEmbedded.text/javascript\",\n      nextEmbedded: \"text/javascript\"\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: \"@rematch\",\n      next: \"@pop\"\n    }]],\n    scriptAfterTypeEquals: [[/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInSimpleState.scriptAfterTypeEquals\"\n    }], [/\"([^\"]*)\"/, {\n      token: \"attribute.value\",\n      switchTo: \"@scriptWithCustomType.$1\"\n    }], [/'([^']*)'/, {\n      token: \"attribute.value\",\n      switchTo: \"@scriptWithCustomType.$1\"\n    }], [/>/, {\n      token: \"delimiter.html\",\n      next: \"@scriptEmbedded.text/javascript\",\n      nextEmbedded: \"text/javascript\"\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: \"@rematch\",\n      next: \"@pop\"\n    }]],\n    scriptWithCustomType: [[/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInSimpleState.scriptWithCustomType.$S2\"\n    }], [/>/, {\n      token: \"delimiter.html\",\n      next: \"@scriptEmbedded.$S2\",\n      nextEmbedded: \"$S2\"\n    }], [/\"([^\"]*)\"/, \"attribute.value\"], [/'([^']*)'/, \"attribute.value\"], [/[\\w\\-]+/, \"attribute.name\"], [/=/, \"delimiter\"], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: \"@rematch\",\n      next: \"@pop\"\n    }]],\n    scriptEmbedded: [[/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInEmbeddedState.scriptEmbedded.$S2\",\n      nextEmbedded: \"@pop\"\n    }], [/<\\/script/, {\n      token: \"@rematch\",\n      next: \"@pop\",\n      nextEmbedded: \"@pop\"\n    }]],\n    style: [[/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInSimpleState.style\"\n    }], [/type/, \"attribute.name\", \"@styleAfterType\"], [/\"([^\"]*)\"/, \"attribute.value\"], [/'([^']*)'/, \"attribute.value\"], [/[\\w\\-]+/, \"attribute.name\"], [/=/, \"delimiter\"], [/>/, {\n      token: \"delimiter.html\",\n      next: \"@styleEmbedded.text/css\",\n      nextEmbedded: \"text/css\"\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(style\\s*)(>)/, [\"delimiter.html\", \"tag.html\", {\n      token: \"delimiter.html\",\n      next: \"@pop\"\n    }]]],\n    styleAfterType: [[/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInSimpleState.styleAfterType\"\n    }], [/=/, \"delimiter\", \"@styleAfterTypeEquals\"], [/>/, {\n      token: \"delimiter.html\",\n      next: \"@styleEmbedded.text/css\",\n      nextEmbedded: \"text/css\"\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: \"@rematch\",\n      next: \"@pop\"\n    }]],\n    styleAfterTypeEquals: [[/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInSimpleState.styleAfterTypeEquals\"\n    }], [/\"([^\"]*)\"/, {\n      token: \"attribute.value\",\n      switchTo: \"@styleWithCustomType.$1\"\n    }], [/'([^']*)'/, {\n      token: \"attribute.value\",\n      switchTo: \"@styleWithCustomType.$1\"\n    }], [/>/, {\n      token: \"delimiter.html\",\n      next: \"@styleEmbedded.text/css\",\n      nextEmbedded: \"text/css\"\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: \"@rematch\",\n      next: \"@pop\"\n    }]],\n    styleWithCustomType: [[/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInSimpleState.styleWithCustomType.$S2\"\n    }], [/>/, {\n      token: \"delimiter.html\",\n      next: \"@styleEmbedded.$S2\",\n      nextEmbedded: \"$S2\"\n    }], [/\"([^\"]*)\"/, \"attribute.value\"], [/'([^']*)'/, \"attribute.value\"], [/[\\w\\-]+/, \"attribute.name\"], [/=/, \"delimiter\"], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: \"@rematch\",\n      next: \"@pop\"\n    }]],\n    styleEmbedded: [[/@[^@]/, {\n      token: \"@rematch\",\n      switchTo: \"@razorInEmbeddedState.styleEmbedded.$S2\",\n      nextEmbedded: \"@pop\"\n    }], [/<\\/style/, {\n      token: \"@rematch\",\n      next: \"@pop\",\n      nextEmbedded: \"@pop\"\n    }]],\n    razorInSimpleState: [[/@\\*/, \"comment.cs\", \"@razorBlockCommentTopLevel\"], [/@[{(]/, \"metatag.cs\", \"@razorRootTopLevel\"], [/(@)(\\s*[\\w]+)/, [\"metatag.cs\", {\n      token: \"identifier.cs\",\n      switchTo: \"@$S2.$S3\"\n    }]], [/[})]/, {\n      token: \"metatag.cs\",\n      switchTo: \"@$S2.$S3\"\n    }], [/\\*@/, {\n      token: \"comment.cs\",\n      switchTo: \"@$S2.$S3\"\n    }]],\n    razorInEmbeddedState: [[/@\\*/, \"comment.cs\", \"@razorBlockCommentTopLevel\"], [/@[{(]/, \"metatag.cs\", \"@razorRootTopLevel\"], [/(@)(\\s*[\\w]+)/, [\"metatag.cs\", {\n      token: \"identifier.cs\",\n      switchTo: \"@$S2.$S3\",\n      nextEmbedded: \"$S3\"\n    }]], [/[})]/, {\n      token: \"metatag.cs\",\n      switchTo: \"@$S2.$S3\",\n      nextEmbedded: \"$S3\"\n    }], [/\\*@/, {\n      token: \"comment.cs\",\n      switchTo: \"@$S2.$S3\",\n      nextEmbedded: \"$S3\"\n    }]],\n    razorBlockCommentTopLevel: [[/\\*@/, \"@rematch\", \"@pop\"], [/[^*]+/, \"comment.cs\"], [/./, \"comment.cs\"]],\n    razorBlockComment: [[/\\*@/, \"comment.cs\", \"@pop\"], [/[^*]+/, \"comment.cs\"], [/./, \"comment.cs\"]],\n    razorRootTopLevel: [[/\\{/, \"delimiter.bracket.cs\", \"@razorRoot\"], [/\\(/, \"delimiter.parenthesis.cs\", \"@razorRoot\"], [/[})]/, \"@rematch\", \"@pop\"], {\n      include: \"razorCommon\"\n    }],\n    razorRoot: [[/\\{/, \"delimiter.bracket.cs\", \"@razorRoot\"], [/\\(/, \"delimiter.parenthesis.cs\", \"@razorRoot\"], [/\\}/, \"delimiter.bracket.cs\", \"@pop\"], [/\\)/, \"delimiter.parenthesis.cs\", \"@pop\"], {\n      include: \"razorCommon\"\n    }],\n    razorCommon: [[/[a-zA-Z_]\\w*/, {\n      cases: {\n        \"@razorKeywords\": {\n          token: \"keyword.cs\"\n        },\n        \"@default\": \"identifier.cs\"\n      }\n    }], [/[\\[\\]]/, \"delimiter.array.cs\"], [/[ \\t\\r\\n]+/], [/\\/\\/.*$/, \"comment.cs\"], [/@\\*/, \"comment.cs\", \"@razorBlockComment\"], [/\"([^\"]*)\"/, \"string.cs\"], [/'([^']*)'/, \"string.cs\"], [/(<)([\\w\\-]+)(\\/>)/, [\"delimiter.html\", \"tag.html\", \"delimiter.html\"]], [/(<)([\\w\\-]+)(>)/, [\"delimiter.html\", \"tag.html\", \"delimiter.html\"]], [/(<\\/)([\\w\\-]+)(>)/, [\"delimiter.html\", \"tag.html\", \"delimiter.html\"]], [/[\\+\\-\\*\\%\\&\\|\\^\\~\\!\\=\\<\\>\\/\\?\\;\\:\\.\\,]/, \"delimiter.cs\"], [/\\d*\\d+[eE]([\\-+]?\\d+)?/, \"number.float.cs\"], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float.cs\"], [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, \"number.hex.cs\"], [/0[0-7']*[0-7]/, \"number.octal.cs\"], [/0[bB][0-1']*[0-1]/, \"number.binary.cs\"], [/\\d[\\d']*/, \"number.cs\"], [/\\d/, \"number.cs\"]]\n  },\n  razorKeywords: [\"abstract\", \"as\", \"async\", \"await\", \"base\", \"bool\", \"break\", \"by\", \"byte\", \"case\", \"catch\", \"char\", \"checked\", \"class\", \"const\", \"continue\", \"decimal\", \"default\", \"delegate\", \"do\", \"double\", \"descending\", \"explicit\", \"event\", \"extern\", \"else\", \"enum\", \"false\", \"finally\", \"fixed\", \"float\", \"for\", \"foreach\", \"from\", \"goto\", \"group\", \"if\", \"implicit\", \"in\", \"int\", \"interface\", \"internal\", \"into\", \"is\", \"lock\", \"long\", \"nameof\", \"new\", \"null\", \"namespace\", \"object\", \"operator\", \"out\", \"override\", \"orderby\", \"params\", \"private\", \"protected\", \"public\", \"readonly\", \"ref\", \"return\", \"switch\", \"struct\", \"sbyte\", \"sealed\", \"short\", \"sizeof\", \"stackalloc\", \"static\", \"string\", \"select\", \"this\", \"throw\", \"true\", \"try\", \"typeof\", \"uint\", \"ulong\", \"unchecked\", \"unsafe\", \"ushort\", \"using\", \"var\", \"virtual\", \"volatile\", \"void\", \"when\", \"while\", \"where\", \"yield\", \"model\", \"inject\"],\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/\n};\n\n\n//# sourceURL=webpack://online-conplier/./node_modules/monaco-editor/esm/vs/basic-languages/razor/razor.js?");

/***/ })

}]);